#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (c) 2014 Lorenz Quack
# 
# This software is provided 'as-is', without any express or implied warranty.
# In no event will the authors be held liable for any damages arising from the
# use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
#    1. The origin of this software must not be misrepresented; you must not
#       claim that you wrote the original software. If you use this software
#       in a product, an acknowledgment in the product documentation would be
#       appreciated but is not required.
#
#    2. Altered source versions must be plainly marked as such, and must not
#       be misrepresented as being the original software.
#
#    3. This notice may not be removed or altered from any source distribution.


try:
    import builtins
except ImportError:
    builtins = __builtins__
import sys
import importlib
import base64
import zlib
import io
import argparse
import re
import tokenize
import keyword


__template = '''# generated by data2py. Do not edit
__encodedData = r"""{data}"""
__crc = {crc:d}

def getData(verify=True):
    import base64
    data = base64.b64decode(__encodedData)
    if verify:
        import zlib
        crc = zlib.crc32(data) & 0xffffffff
        if crc != __crc:
            raise RuntimeError("data is corrupted")
    return data
'''

def save(inFilename):
    outFilename = sanatiseName(inFilename) + ".py"
    with builtins.open(inFilename) as inFile:
        with builtins.open(outFilename, "w") as outFile:
            data = inFile.read()
            crc = zlib.crc32(data) & 0xffffffff
            encodedData = base64.b64encode(data)
            outFile.write(__template.format(data=encodedData, crc=crc))
            print("Saved content of '{inFile}' to '{outFile}'".format(
                inFile=inFilename, outFile=outFilename))

def _getModule(moduleName):
    sys.path.insert(0, ".")
    moduleName = sanatiseName(moduleName)
    module = importlib.import_module(moduleName)
    sys.path = sys.path[1:]
    return module

def load(inFilename):
    return _getModule(inFilename).getData()

def open(inFilename):
    return io.BytesIO(_getModule(inFilename).getData())

def sanatiseName(name):
    name_ = name.replace(".", "_")
    if (not re.match("^" + tokenize.Name + '$', name_) or
        keyword.iskeyword(name_)):
        raise RuntimeError("%s cannot be sanitised" % name)
    return name_


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Convert a data file to a python resource module")
    parser.add_argument('FILE', action='store', help="filename of data file that should be converted to a python resource file.")
    args = parser.parse_args()
    save(args.FILE)
    

